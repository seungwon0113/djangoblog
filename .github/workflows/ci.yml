name: Django CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: djangoblog
          POSTGRES_USER: djangoblog
          POSTGRES_PASSWORD: djangoblog
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install Dependencies
      working-directory: ./backend
      run: |
        poetry config virtualenvs.create false
        poetry install --no-root

    - name: Run Django Tests
      working-directory: ./backend
      env:
        DJANGO_SECRET_KEY: django-insecure-test-key
        DB_NAME: djangoblog
        DB_USER: djangoblog
        DB_PASSWORD: djangoblog
        DB_HOST: localhost
        DB_PORT: 5432
        EMAIL_HOST: smtp.gmail.com
        EMAIL_PORT: 587
        EMAIL_USE_TLS: True
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      run: |
        poetry run python manage.py makemigrations
        poetry run python manage.py migrate
        poetry run python manage.py test

    - name: Run Linting
      working-directory: ./backend
      run: |
        poetry run black . --check
        poetry run isort . --check

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose V2
      run: |
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
        docker compose version

    - name: Create .env file
      run: |
        cat << EOF > .env
        DJANGO_SECRET_KEY=django-insecure-test-key
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_HOST=database
        DB_PORT=5432
        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
        EMAIL_HOST=smtp.gmail.com
        EMAIL_PORT=587
        EMAIL_USE_TLS=True
        EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}
        EOF
      
    - name: Build and Test Docker Compose
      env:
        DJANGO_SECRET_KEY: django-insecure-test-key
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: database
        DB_PORT: 5432
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        EMAIL_HOST: smtp.gmail.com
        EMAIL_PORT: 587
        EMAIL_USE_TLS: True
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      run: |
        # 데이터베이스 시작
        docker compose up -d database
        
        # 데이터베이스 준비 상태 확인
        echo "Waiting for database to be ready..."
        for i in {1..30}; do
          if docker compose exec -T database pg_isready -U ${{ secrets.DB_USER }}; then
            echo "Database is ready!"
            break
          fi
          echo "Waiting for database... attempt $i"
          sleep 2
        done
        
        # 백엔드 빌드 및 시작
        docker compose build backend
        docker compose up -d backend
        sleep 10
        
        # 컨테이너 상태 확인
        docker compose ps
        docker compose logs
        
        # 테스트 실행
        docker compose exec -T backend poetry run python manage.py test
        
    - name: Clean up
      if: always()
      run: docker compose down -v
