name: Django CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: djangoblog
          POSTGRES_USER: djangoblog
          POSTGRES_PASSWORD: djangoblog
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Install Dependencies
      working-directory: ./backend
      run: |
        poetry config virtualenvs.create false
        poetry install --no-root

    - name: Run Django Tests
      working-directory: ./backend
      env:
        DJANGO_SECRET_KEY: django-insecure-test-key
        DB_NAME: djangoblog
        DB_USER: djangoblog
        DB_PASSWORD: djangoblog
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        poetry run python manage.py makemigrations
        poetry run python manage.py migrate
        poetry run python manage.py test

    - name: Run Linting
      working-directory: ./backend
      run: |
        poetry run black . --check

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Create .env file
      run: |
        echo "DJANGO_SECRET_KEY=django-insecure-test-key" > .env
        echo "DB_NAME=djangoblog" >> .env
        echo "DB_USER=djangoblog" >> .env
        echo "DB_PASSWORD=djangoblog" >> .env
        echo "DB_HOST=database" >> .env
        echo "DB_PORT=5432" >> .env
      
    - name: Build and Test Docker Compose
      env:
        DJANGO_SECRET_KEY: django-insecure-test-key
        DB_NAME: djangoblog
        DB_USER: djangoblog
        DB_PASSWORD: djangoblog
        DB_HOST: database
        DB_PORT: 5432
      run: |
        # 먼저 데이터베이스만 시작
        docker-compose up -d database
        
        # 데이터베이스가 준비될 때까지 대기
        echo "Waiting for database to be ready..."
        timeout 30s bash -c 'until docker-compose exec -T database pg_isready -U djangoblog -d djangoblog; do sleep 2; done'
        
        # 데이터베이스 로그 확인
        echo "Database logs:"
        docker-compose logs database
        
        # 백엔드 시작
        docker-compose up -d backend
        
        # 백엔드가 준비될 때까지 대기
        echo "Waiting for backend to be ready..."
        sleep 10
        
        # 백엔드 로그 확인
        echo "Backend logs:"
        docker-compose logs backend
        
        # 컨테이너 상태 확인
        docker-compose ps
        
        # 테스트 실행
        docker-compose exec -T backend poetry run python manage.py migrate
        docker-compose exec -T backend poetry run python manage.py test
        
    - name: Clean up
      if: always()
      run: docker-compose down -v
