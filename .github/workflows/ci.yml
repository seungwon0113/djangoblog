name: CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: djangoblog
          POSTGRES_USER: djangoblog
          POSTGRES_PASSWORD: djangoblog
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Dependencies
        working-directory: ./backend
        run: poetry install --no-root

      - name: Run Tests
        working-directory: ./backend
        env:
          DJANGO_SECRET_KEY: django-insecure-test-key
          DB_NAME: djangoblog
          DB_USER: djangoblog
          DB_PASSWORD: djangoblog
          DB_HOST: localhost
          DB_PORT: 5432
          EMAIL_HOST: smtp.gmail.com
          EMAIL_PORT: 587
          EMAIL_USE_TLS: True
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        run: |
          poetry run python manage.py test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/backend:buildcache,mode=max

      - name: Build and push nginx
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nginx:buildcache,mode=max