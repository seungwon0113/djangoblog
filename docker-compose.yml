version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME}/backend:latest
    platform: linux/amd64
    volumes:
      - ./backend:/backend
      - static_volume:/backend/static
      - media_volume:/backend/media
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - DB_HOST=database
    networks:
      - app-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: ${DOCKER_USERNAME}/nginx:latest
    platform: linux/amd64
    ports:
      - "80:80"
    volumes:
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - backend
    networks:
      - app-network
    restart: always

  database:
    image: postgres:14
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app-network:
    driver: bridge
